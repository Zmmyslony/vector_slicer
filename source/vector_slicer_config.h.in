// Copyright (c) 2023, Michał Zmyślony, mlz22@cam.ac.uk.
//
// Please cite Michał Zmyślony and Dr John Biggins if you use any part of this code in work you publish or distribute.
//
// This file is part of Vector Slicer.
//
// Vector Slicer is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
// later version.
//
// Vector Slicer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along with Vector Slicer.
// If not, see <https://www.gnu.org/licenses/>.

#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

// Uncomment to do a timing run, where instead of generating pattern it inialises it and does a first iteration to
// benchmark the speed.
// #define TIMING

// Uncomment to keep the directional disagreement of the director in addition to the dot product disagreement
#define DISAGREEMENT_ANGULAR

#define SLICER_NAME "@PROJECT_NAME@"
#define SLICER_VER  "@PROJECT_VERSION@"
#define SLICER_VER_MAJOR "@PROJECT_VERSION_MAJOR@"
#define SLICER_VER_MINOR "@PROJECT_VERSION_MINOR@"
#define SLICER_VER_PATCH "@PROJECT_VERSION_PATCH@"

#define PATTERNS_PATH "${PROJECT_SOURCE_DIR}/configuration/files_to_test.txt"
#define BAYESIAN_CONFIG "${PROJECT_SOURCE_DIR}/configuration/bayesian_optimisation.cfg"
#define DISAGREEMENT_FUNCTION_CONFIG "${PROJECT_SOURCE_DIR}/configuration/disagreement_function.cfg"
#define DISAGREEMENT_CONFIG "${PROJECT_SOURCE_DIR}/configuration/disagreement.cfg"
#define FILLING_CONFIG "${PROJECT_SOURCE_DIR}/configuration/filling.cfg"

#define OUTPUT_PATH "${PROJECT_SOURCE_DIR}/output"
#define LOGS_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/logs"
#define CONFIG_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/best_configs"
#define FILLED_MATRIX_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/filled_matrices"
#define OPTIMISATION_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/optimisation_save"
#define OVERLAP_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/overlap"
#define PATHS_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/paths"
#define SEED_EXPORT_PATH "${PROJECT_SOURCE_DIR}/output/used_seeds"
#define DISAGREEMENT_BUCKETS_PATH "${PROJECT_SOURCE_DIR}/output/bucketed_disagreement"
#define SAMPLED_DENSITY "${PROJECT_SOURCE_DIR}/output/sampled_density"

#define PATTERNS_SOURCE_DIRECTORY "${PROJECT_SOURCE_DIR}/patterns"

#pragma once

#if defined(_MSC_VER)
    #define SLICER_DLLEXPORT extern "C" __declspec(dllexport) // Microsoft
#elif defined(__GNUC__)
    #define SLICER_DLLEXPORT extern "C" __attribute__((visibility("default"))) // GCC
#else
    #define SLICER_DLLEXPORT extern "C" // Most compilers export all the symbols by default. We hope for the best here.
    #pragma warning Unknown dynamic link import/export semantics.
#endif

#endif // INCLUDE_GUARD